<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Paul&#x27;s Journal - open source</title>
    <link rel="self" type="application/atom+xml" href="https://krepa098.github.io/tags/open-source/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://krepa098.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-03-01T00:00:00+00:00</updated>
    <id>https://krepa098.github.io/tags/open-source/atom.xml</id>
    <entry xml:lang="en">
        <title>ESDF Generation</title>
        <published>2024-03-01T00:00:00+00:00</published>
        <updated>2024-03-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://krepa098.github.io/projects/esdf-generation/"/>
        <id>https://krepa098.github.io/projects/esdf-generation/</id>
        
        <content type="html" xml:base="https://krepa098.github.io/projects/esdf-generation/">&lt;div class=&quot;gallery-scroll-container send-back&quot;&gt;

    &lt;!-- scrolling container --&gt;
    &lt;div class=&quot;gallery-row&quot; id=&quot;gallery-scrollbar&quot;&gt;
        &lt;!-- gallery elements --&gt;
        
        
        
        
        
        
        

        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p1&quot;&gt;
            
            &lt;video id=&quot;content&quot; autoplay loop playsinline disablePictureInPicture muted&gt;
                &lt;source src=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;raw&#x2F;projects&#x2F;esdf&#x2F;generation.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
            &lt;&#x2F;video&gt;
            

            
            &lt;div class=&quot;gallery-image-caption no-user-select&quot;&gt;the blockwise esdf generation process&lt;&#x2F;div&gt;
            
        &lt;&#x2F;div&gt;
        
        


        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    &lt;&#x2F;div&gt;

    &lt;!-- next and previous buttons --&gt;
    
    
    
    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    &lt;div class=&quot;gallery-popover&quot; id=&quot;gallery-popover&quot;&gt;&lt;&#x2F;div&gt;

    &lt;!-- scroll script --&gt;
    &lt;script src=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;js&#x2F;gallery.js&quot;&gt;&lt;&#x2F;script&gt;

&lt;&#x2F;div&gt;&lt;h3 id=&quot;description&quot;&gt;Description&lt;&#x2F;h3&gt;
&lt;p&gt;Euclidean Signed Distance Fields (ESDF) are used to infer the closest distance at any point to the nearest surface in a voxel or pixel grid.
As such, they are used in robotics, e.g., for navigation purposes, as an instrument to account for the robot&#x27;s dimensions.
Considering the distances stored in the grid, the robot&#x27;s path can be kept clear from any obstacles simply by excluding cells with a distance below a given threshold.&lt;&#x2F;p&gt;
&lt;p&gt;The implementation of the ESDF algorithm shown &lt;a href=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;projects&#x2F;esdf-generation&#x2F;#p1&quot;&gt;[here]&lt;&#x2F;a&gt; is derived from the &lt;code&gt;nvblox&lt;&#x2F;code&gt; algorithm &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, a highly optimized GPU-accelerated algorithm that works on a block-by-block (chunks) basis.&lt;&#x2F;p&gt;
&lt;p&gt;The core algorithm is divided into two phases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;sweep (staying within the block boundaries)&lt;&#x2F;li&gt;
&lt;li&gt;propagation (crossing the block boundaries)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;During the sweep phase, the distances to any given surface in the block are calculated along all axes of the grid and in both directions.
Thereby the distance of a cell is only updated if a smaller distance is found.
The propagate phase accesses the neighboring blocks to propagate distances across boundaries.
The algorithm stops once no more changes are made.&lt;&#x2F;p&gt;
&lt;p&gt;The sites (block index closest to the surface) are for bookkeeping purposes.
In case of a block update (changed surfaces), all blocks containing sites of this block&#x27;s index need to be cleared and reevaluated (thus enabling partial updates).&lt;&#x2F;p&gt;
&lt;p&gt;The nature of the algorithm allows easy parallel execution of the sweep phase since they do not cross block boundaries.&lt;&#x2F;p&gt;
&lt;p&gt;This project features a CPU-based implementation and a na√Øve GPU implementation using &lt;code&gt;compute shaders&lt;&#x2F;code&gt; on top of &lt;code&gt;wgpu&lt;&#x2F;code&gt;.
The current GPU implementation is slower due to excessive buffer transfers.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Millane, Alexander, et al. &quot;nvblox: GPU-Accelerated Incremental Signed Distance Field Mapping.&quot; arXiv preprint arXiv:2311.00626 (2023).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Indoor Air Monitoring System</title>
        <published>2023-01-01T00:00:00+00:00</published>
        <updated>2023-01-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://krepa098.github.io/projects/indoor-air-monitoring-system/"/>
        <id>https://krepa098.github.io/projects/indoor-air-monitoring-system/</id>
        
        <content type="html" xml:base="https://krepa098.github.io/projects/indoor-air-monitoring-system/">&lt;div class=&quot;gallery-scroll-container send-back&quot;&gt;

    &lt;!-- scrolling container --&gt;
    &lt;div class=&quot;gallery-row&quot; id=&quot;gallery-scrollbar&quot;&gt;
        &lt;!-- gallery elements --&gt;
        
        
        
        
        
        
        
        
        
        
        

        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p1&quot;&gt;
            
            
            &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;krepa098.github.io&amp;#x2F;processed_images&amp;#x2F;casing.da47fb931fba0449.jpg&quot; id=&quot;content&quot;&gt;
            

            
            &lt;div class=&quot;gallery-image-caption no-user-select&quot;&gt;the smart meters with their casings&lt;&#x2F;div&gt;
            
        &lt;&#x2F;div&gt;
        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p2&quot;&gt;
            
            
            &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;krepa098.github.io&amp;#x2F;processed_images&amp;#x2F;preview.d9c28e47b79fac11.jpg&quot; id=&quot;content&quot;&gt;
            

            
            &lt;div class=&quot;gallery-image-caption no-user-select&quot;&gt;frontend: a dashboard to access historical data&lt;&#x2F;div&gt;
            
        &lt;&#x2F;div&gt;
        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p3&quot;&gt;
            
            
            &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;krepa098.github.io&amp;#x2F;processed_images&amp;#x2F;hardware-pcb.d6db0105c7cf39f0.jpg&quot; id=&quot;content&quot;&gt;
            

            
            &lt;div class=&quot;gallery-image-caption no-user-select&quot;&gt;the sensor&amp;#x27;s ESP32-based hardware&lt;&#x2F;div&gt;
            
        &lt;&#x2F;div&gt;
        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p4&quot;&gt;
            
            
            &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;krepa098.github.io&amp;#x2F;processed_images&amp;#x2F;hardware-block-diagram.38bdb52b7fc4dcb8.jpg&quot; id=&quot;content&quot;&gt;
            

            
            &lt;div class=&quot;gallery-image-caption no-user-select&quot;&gt;the sensor&amp;#x27;s block diagram&lt;&#x2F;div&gt;
            
        &lt;&#x2F;div&gt;
        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p5&quot;&gt;
            
            
            &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;krepa098.github.io&amp;#x2F;processed_images&amp;#x2F;power-profile.bb51fa9698c95650.jpg&quot; id=&quot;content&quot;&gt;
            

            
            &lt;div class=&quot;gallery-image-caption no-user-select&quot;&gt;power consumption: periodical wake-ups to sample and transfer data&lt;&#x2F;div&gt;
            
        &lt;&#x2F;div&gt;
        
        


        
        
        
        
        
        
        
        
        
        
        
        
    &lt;&#x2F;div&gt;

    &lt;!-- next and previous buttons --&gt;
    
    
    
    
    
    
    
    
    
    

    
    &lt;a class=&quot;gallery-prev hidden-mobile&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
    &lt;a class=&quot;gallery-next hidden-mobile&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
    

    
    
    
    
    
    
    
    
    
    
    
    

    &lt;div class=&quot;gallery-popover&quot; id=&quot;gallery-popover&quot;&gt;&lt;&#x2F;div&gt;

    &lt;!-- scroll script --&gt;
    &lt;script src=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;js&#x2F;gallery.js&quot;&gt;&lt;&#x2F;script&gt;

&lt;&#x2F;div&gt;&lt;h3 id=&quot;description&quot;&gt;Description&lt;&#x2F;h3&gt;
&lt;p&gt;Indoor air quality systems typically monitor temperature, humidity, pressure, and air quality (VOCs or CO2).
The main sensor is Bosch&#x27;s &lt;code&gt;BME680&lt;&#x2F;code&gt; which measures&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; for all of these quantities and comes in a small package.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;ESP32-C3&lt;&#x2F;code&gt; is the main processor on this &lt;a href=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;projects&#x2F;indoor-air-monitoring-system&#x2F;#p3&quot;&gt;[board]&lt;&#x2F;a&gt; which periodically (e.g., every 5 minutes) polls the air quality sensor for new measurements.
Those measurements are then processed by Bosch&#x27;s &lt;code&gt;bsec2&lt;&#x2F;code&gt; library and stored for transfer.
After accumulating several readings, the microcontroller connects to the WiFi network and broadcasts the measurements via UDP on port 8989.
Connecting to the WiFi network is by far the most &lt;a href=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;projects&#x2F;indoor-air-monitoring-system&#x2F;#p5&quot;&gt;[expensive operation]&lt;&#x2F;a&gt; (and the main downside of using WiFi for IOT).
Powered by 4xAA NiMH batteries, the device manages to operate for about three months.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;backend&lt;&#x2F;code&gt; listens on port 8989 for incoming traffic.
Upon reception of a measurements data package, the content is parsed and stored in the &lt;code&gt;sqlite&lt;&#x2F;code&gt; database.
Queries to the database use &lt;code&gt;diesel&lt;&#x2F;code&gt; ORM, which enforces corrects of the queries (and the matching data structures) at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;frontend&lt;&#x2F;code&gt; is written in &lt;code&gt;rust&lt;&#x2F;code&gt; with the &lt;code&gt;yew&lt;&#x2F;code&gt; web app framework.
It compiles to a &lt;code&gt;wasm&lt;&#x2F;code&gt; binary, which is loaded by the browser and creates &lt;a href=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;projects&#x2F;indoor-air-monitoring-system&#x2F;#p2&quot;&gt;[the webpage]&lt;&#x2F;a&gt;.
Data is queried from the database using the backend&#x27;s &lt;code&gt;REST&lt;&#x2F;code&gt; API and is plotted with &lt;code&gt;plotly&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Frontend and backend are deployed as a &lt;code&gt;docker container&lt;&#x2F;code&gt; (e.g., to a NAS).&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;air quality is &lt;em&gt;estimated&lt;&#x2F;em&gt; based on a change in resistance (MOX sensor) and a model of some kind baked into Bosch&#x27;s library.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>STL Thumbnail Provider</title>
        <published>2021-01-01T00:00:00+00:00</published>
        <updated>2021-01-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://krepa098.github.io/projects/stl-thumbnail-provider/"/>
        <id>https://krepa098.github.io/projects/stl-thumbnail-provider/</id>
        
        <content type="html" xml:base="https://krepa098.github.io/projects/stl-thumbnail-provider/">&lt;div class=&quot;gallery-scroll-container send-back&quot;&gt;

    &lt;!-- scrolling container --&gt;
    &lt;div class=&quot;gallery-row&quot; id=&quot;gallery-scrollbar&quot;&gt;
        &lt;!-- gallery elements --&gt;
        
        
        
        
        
        
        
        
        
        
        
        
        

        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p1&quot;&gt;
            
            
            &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;krepa098.github.io&amp;#x2F;processed_images&amp;#x2F;preview.257cfbf39401b474.jpg&quot; id=&quot;content&quot;&gt;
            

            
        &lt;&#x2F;div&gt;
        
        
        
        
        
        &lt;div class=&quot;gallery-content-wide&quot; id=&quot;p2&quot;&gt;
            
            &lt;video id=&quot;content&quot; autoplay loop playsinline disablePictureInPicture muted&gt;
                &lt;source src=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;raw&#x2F;projects&#x2F;stl2thumbnail&#x2F;turntable.mp4&quot; type=&quot;video&#x2F;mp4&quot; &#x2F;&gt;
            &lt;&#x2F;video&gt;
            

            
        &lt;&#x2F;div&gt;
        
        


        
        
        
        
        
        
        
        
        
        
    &lt;&#x2F;div&gt;

    &lt;!-- next and previous buttons --&gt;
    
    
    
    
    
    
    
    
    
    
    
    

    
    &lt;a class=&quot;gallery-prev hidden-mobile&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
    &lt;a class=&quot;gallery-next hidden-mobile&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
    

    
    
    
    
    
    
    
    
    
    

    &lt;div class=&quot;gallery-popover&quot; id=&quot;gallery-popover&quot;&gt;&lt;&#x2F;div&gt;

    &lt;!-- scroll script --&gt;
    &lt;script src=&quot;https:&#x2F;&#x2F;krepa098.github.io&#x2F;js&#x2F;gallery.js&quot;&gt;&lt;&#x2F;script&gt;

&lt;&#x2F;div&gt;&lt;h3 id=&quot;description&quot;&gt;Description&lt;&#x2F;h3&gt;
&lt;p&gt;This project was born out of the need to quickly find my &lt;code&gt;.stl&lt;&#x2F;code&gt; files on my cluttered desktop.&lt;&#x2F;p&gt;
&lt;p&gt;In essence, this is a library that parses a given .stl, generates a list of triangles, and then uses software rasterizing to render an image.
This image is then handled according to the desktop environment&#x27;s thumbnail infrastructure&#x27;s needs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Software rasterizing&lt;&#x2F;code&gt; was a conscious choice for a multitude of reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;portability between different platforms&lt;&#x2F;li&gt;
&lt;li&gt;to avoid driver issues and limitations due to sandboxing and library size (e.g., Gnome uses sandboxing and thumbnail generators have to access to the GPU).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The rendering quality is a bit lower and slower compared to GPU-accelerated rendering.
However it could technically run even on a MCU found in 3D printers as the complete model doesn&#x27;t even need to be kept in memory, and triangles can be read and rendered one by one.&lt;&#x2F;p&gt;
&lt;p&gt;The rendering process is as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;for each triangle in the stl
&lt;ul&gt;
&lt;li&gt;transform triangle from world- to screen-space&lt;&#x2F;li&gt;
&lt;li&gt;calculate its bounds in screen-space&lt;&#x2F;li&gt;
&lt;li&gt;iterate over the bounds and check if the pixel &lt;code&gt;P&lt;&#x2F;code&gt; is inside the triangle
&lt;ul&gt;
&lt;li&gt;calculate &lt;code&gt;P&lt;&#x2F;code&gt;&#x27;s color (considering the light source and material properties)&lt;&#x2F;li&gt;
&lt;li&gt;perform a z-test (check if it is closer to the camera than the current &lt;code&gt;P&lt;&#x2F;code&gt;) and put &lt;code&gt;P&lt;&#x2F;code&gt;&#x27;s color into the image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The initial project was written in &lt;code&gt;C++&lt;&#x2F;code&gt; and then ported to &lt;code&gt;Rust&lt;&#x2F;code&gt; at a later stage with support for the Windows desktop and automated builds on Github&#x27;s &lt;code&gt;CI&#x2F;CD&lt;&#x2F;code&gt; infrastructure.
The Windows support is particularly challenging as it requires implementing a poorly documented &lt;code&gt;COM&lt;&#x2F;code&gt; interface, registering the &lt;code&gt;.dll&lt;&#x2F;code&gt; upon installation, and setting the required registry keys.
Gnome is a lot simpler; it simply runs an executable that generates a picture at a given location.
Finally, KDE wants to see a shared library implementing the ThumbCreator interface.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
